{"version":3,"sources":["context/auth.js","util/AuthRoute.js","components/MenuBar.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","views/Home.js","views/Login.js","views/Register.js","views/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["initialState","user","localStorage","getItem","token","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","data","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","userData","setItem","AuthRouter","Component","component","rest","useContext","render","to","MenuBar","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","LIKE_POST_MUTATION","gql","LikeButton","post","id","likes","likeCount","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","Popup","content","inverted","trigger","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","callback","commentId","client","useApolloClient","confirmOpen","setConfirmOpen","mutation","update","readQuery","query","writeQuery","getPosts","filter","deletePostOrComment","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","_","res","onError","error","Form","autoComplete","Field","Input","placeholder","disabled","trim","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","history","push","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","FETCH_POST_QUERY","SUBMIT_COMMENT_MUTATION","SinglePost","postMarkup","match","params","commentInput","useRef","comment","setComment","current","blur","submitComment","getPost","comments","width","float","padding","console","log","ref","App","Container","exact","AuthRoute","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e5c5e350.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user: null\n}\n\nif (localStorage.getItem('jwtToken')) {\n    const token = jwtDecode(localStorage.getItem('jwtToken'))\n\n    if (token.exp * 1000 < Date.now()) {\n        localStorage.removeItem('jwtToken')\n    } else {\n        initialState.user = token\n    }\n}\n\nconst AuthContext = createContext({\n    user: null,\n    login: data => {},\n    logout: () => {}\n})\n\nfunction authReducer(state, action) {\n    switch (action.type){\n        case 'LOGIN':\n            return {\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT':\n            return {\n                ...state,\n                user: null\n            }\n        default:\n            return state\n    }\n}\n\nfunction AuthProvider(props) {\n    const [state, dispatch] = useReducer(authReducer, initialState)\n\n    const login = userData =>  {\n        localStorage.setItem('jwtToken', userData.token)\n        dispatch({ type: 'LOGIN', payload: userData })\n    }\n\n    const logout = () => {\n        localStorage.removeItem('jwtToken')\n        dispatch({ type: 'LOGOUT' })\n    }\n\n    return <AuthContext.Provider value={{ user: state.user, login, logout }} {...props} />\n}\n\nexport { AuthContext, AuthProvider }","import React, { useContext } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\nimport { AuthContext } from '../context/auth'\n\nfunction AuthRouter({ component: Component, ...rest }) {\n    const { user } = useContext(AuthContext)\n\n    return (\n        <Route\n            {...rest}\n            render={props => user ? <Redirect to=\"/\" />: <Component {...props}/>}\n        />\n    )\n}\n\nexport default AuthRouter","import React, { useContext, useState } from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nimport { AuthContext } from '../context/auth'\n\nfunction MenuBar () {\n    const { user, logout } = useContext(AuthContext)\n    const pathname = window.location.pathname\n    \n    const path = pathname === '/' ? 'home' : pathname.substr(1)\n    \n    const [activeItem, setActiveItem] = useState(path)\n\n    const handleItemClick = (e, { name }) => setActiveItem(name)\n\n    const menuBar = user ? (\n        <Menu pointing secondary size=\"massive\" color='teal'>\n                <Menu.Item\n                    name={user.username}\n                    active\n                    as={Link}\n                    to='/'\n                />\n                <Menu.Menu position='right'>\n                    <Menu.Item\n                        name='logout'\n                        onClick={logout}\n                    />\n                </Menu.Menu>\n            </Menu>\n    ) : (\n        <Menu pointing secondary size=\"massive\" color='teal'>\n                <Menu.Item\n                    name='home'\n                    active={activeItem === 'home'}\n                    onClick={handleItemClick}\n                    as={Link}\n                    to='/'\n                />\n                <Menu.Menu position='right'>\n                    <Menu.Item\n                        name='login'\n                        active={activeItem === 'login'}\n                        onClick={handleItemClick}\n                        as={Link}\n                        to='/login'\n                    />\n                    <Menu.Item\n                        name='register'\n                        active={activeItem === 'register'}\n                        onClick={handleItemClick}\n                        as={Link}\n                        to='/register'\n                    />\n                </Menu.Menu>\n            </Menu>\n    )\n\n    return menuBar\n}\n\nexport default MenuBar","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useMutation } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { Button, Label, Icon, Popup } from 'semantic-ui-react'\n\nfunction LikeButton({ user, post: {id, likes, likeCount} }) {\n    const [liked, setLiked] = useState(false)\n\n    useEffect(() => {\n        if (user && likes.find(like => like.username && user.username)) {\n            setLiked(true)\n        } else {\n            setLiked(false)\n        }\n    }, [user, likes])\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables: { postId: id }\n    })\n\n    const likeButton = user ? (\n        liked ? (\n            <Button color='teal'>\n                <Icon name='heart' />\n            </Button>\n        ):(\n            <Button color='teal' basic>\n                <Icon name='heart' />\n            </Button>\n        )\n    ): (\n        <Button as={Link} to=\"/login\" color=\"teal\" basic>\n            <Icon name='heart' />\n        </Button>\n    )\n\n    return(\n        <Popup content={!liked ? 'like this shit':'i do not like this anymore'} inverted trigger={\n        <Button as='div' labelPosition='right' onClick={user ? likePost:() => {}}>\n            {likeButton}\n            <Label basic color='teal' pointing='left'>\n                {likeCount}\n            </Label>\n        </Button>}/>\n    )\n}\n\nconst LIKE_POST_MUTATION = gql `\n    mutation likePost($postId: ID!) {\n        likePost(postId: $postId) {\n            id\n            likes {\n                id username\n            }\n            likeCount\n        }\n    }\n`\n\nexport default LikeButton","import gql from 'graphql-tag'\n\nexport const FETCH_POSTS_QUERY = gql `\n{\n    getPosts {\n        id body createdAt username likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id username createdAt body\n        }\n    }\n}\n`","import React, { useState } from 'react'\nimport gql from 'graphql-tag'\nimport { useApolloClient, useMutation } from '@apollo/client'\nimport { Button, Confirm,  Icon, Popup } from 'semantic-ui-react'\n\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\n\nfunction DeleteButton({ postId, callback, commentId }) {\n    const client = useApolloClient()\n\n    const [confirmOpen, setConfirmOpen] = useState(false)\n\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\n\n    const [deletePostOrComment] = useMutation(mutation, {\n        update() {\n            setConfirmOpen(false)\n            if (!commentId) {\n                const data = client.readQuery({\n                    query: FETCH_POSTS_QUERY\n                })\n                client.writeQuery({ query: FETCH_POSTS_QUERY, data: { getPosts: data.getPosts.filter(e => e.id !== postId) }})\n            }\n            if (callback) callback()\n        },\n        variables: {\n            postId,\n            commentId\n        }\n    })\n\n    return (\n        <>\n            <Popup content={commentId ? \"delete comment\":\"delete post\"} inverted trigger={\n                <Button as=\"div\" color=\"red\" onClick={() => setConfirmOpen(true)} floated='right'>\n                    <Icon name='trash' style={{margin: 0}}/>\n                </Button>}/>\n            <Confirm open={confirmOpen} onCancel={() => setConfirmOpen(false)} onConfirm={deletePostOrComment}/>\n        </>\n    )\n}\n\nconst DELETE_POST_MUTATION = gql `\n    mutation deletePost($postId: ID!){\n        deletePost(postId: $postId)\n    }\n`\n\nconst DELETE_COMMENT_MUTATION = gql `\n    mutation deleteComment($postId: ID!, $commentId: ID!){\n        deleteComment(postId: $postId, commentId: $commentId) {\n            id\n            comments {\n                id username createdAt body\n            }\n            commentCount\n        }\n    }\n`\n\nexport default DeleteButton","import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Card, Icon, Image, Label, Popup } from 'semantic-ui-react'\nimport moment from 'moment'\n\nimport LikeButton from './LikeButton'\nimport DeleteButton from './DeleteButton'\nimport { AuthContext } from '../context/auth'\n\nfunction PostCard({ post: { username, body, createdAt, id, likeCount, commentCount, likes }}) {\n\n    const { user } = useContext(AuthContext)\n    \n    return (\n        <Card fluid>\n            <Card.Content>\n                <Image\n                    floated='right'\n                    size='mini'\n                    src=\"https://www.flaticon.com/svg/static/icons/svg/565/565431.svg\"\n                />\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta as={Link} to={`/posts/${id}`}>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n            <LikeButton user={user} post={{ id, likes, likeCount }}/>\n            <Popup content='comment on post' inverted trigger={\n            <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\n                <Button color='blue' basic>\n                    <Icon name='comments' />\n                </Button>\n                <Label basic color='blue' pointing='left'>\n                    {commentCount}\n                </Label>\n            </Button>}/>\n            {user && user.username === username && <DeleteButton postId={id} />}\n            </Card.Content>\n        </Card>\n    )\n}\n\nexport default PostCard","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState)\n\n    const onChange = e => {\n        setValues({ ...values, [e.target.name]: e.target.value })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault()\n        callback()\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}","import React from 'react'\nimport { Button, Form } from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport { useApolloClient, useMutation } from \"@apollo/client\"\n\nimport { useForm } from '../util/hooks'\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\n\nfunction PostForm() {\n    const client = useApolloClient()\n\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    })\n\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(_, res) {\n            const data = client.readQuery({\n                query: FETCH_POSTS_QUERY\n            })\n            client.writeQuery({ query: FETCH_POSTS_QUERY, data: { getPosts: [res, ...data.getPosts] }})\n            values.body = ''\n        },\n        onError(error) {\n        }\n    })\n\n    function createPostCallback () {\n        createPost()\n    }\n\n    return (\n        <>\n            <Form onSubmit={onSubmit} autoComplete=\"off\">\n                <h2>create a post:</h2>\n                <Form.Field autoComplete=\"off\">\n                    <Form.Input \n                        placeholder='what is on your mind???'\n                        name='body'\n                        onChange={onChange}\n                        value={values.body}\n                        error={error ? true:false}\n                    />\n                    <Button type='submit' color='teal' disabled={values.body.trim() === ''}>\n                        post\n                    </Button>\n                </Form.Field>\n            </Form>\n            {error && (\n                <div className='ui error message' style={{marginBottom: 20 }}>\n                    <ul className='list'>\n                        <li>{error.graphQLErrors[0].message}</li>\n                    </ul>\n                </div>\n            )}\n        </>\n    )\n}\n\n\nconst CREATE_POST_MUTATION = gql `\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n            id body createdAt username\n            likes {\n                id username createdAt\n            }\n            likeCount\n            comments {\n                id body username createdAt\n            }\n            commentCount\n        }\n    }\n`\n\nexport default PostForm","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { Grid, Transition } from 'semantic-ui-react'\n\nimport PostCard from '../components/PostCard'\nimport PostForm from '../components/PostForm'\nimport { AuthContext } from '../context/auth'\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\n\nfunction Home() {\n    const { loading, data } = useQuery(FETCH_POSTS_QUERY)\n    const { user } = useContext(AuthContext)\n\n    return (\n        <Grid columns={3}>\n            <Grid.Row className='page-title'>\n                <h1 className='recent'>Recent Posts</h1>\n            </Grid.Row>\n            <Grid.Row>\n                {user && (\n                    <Grid.Column>\n                        <PostForm />\n                    </Grid.Column>\n                )}\n                {loading ? (\n                    <h1>loading posts...</h1>\n                ): (\n                    <Transition.Group>\n                        {data.getPosts && data.getPosts.map(post => (\n                            <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                                <PostCard post={post} />\n                            </Grid.Column>\n                        ))}\n                    </Transition.Group>\n                )}\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default Home","import React, { useContext, useState } from 'react'\nimport { Button, Form } from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/client'\n\nimport { AuthContext } from '../context/auth'\nimport { useForm } from '../util/hooks'\n\nfunction Login(props) {\n    const context = useContext(AuthContext)\n    const [errors, setErrors] = useState({})\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: '',\n        password: ''\n    })\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        // callback if successful\n        update(_, { data: { login: userData } }) {\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err) {\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        // Setting the variables to the state\n        variables: values\n    })\n\n    function loginUserCallback() {\n        loginUser()\n    }\n\n    return (\n        <div className='form-container'>\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading': ''}>\n                <h1>login</h1>\n                <Form.Input\n                    label='username'\n                    type='text'\n                    placeholder='wait... who are you?'\n                    name='username'\n                    value={values.username}\n                    error={ errors.username ? true:false }\n                    onChange={onChange}/>\n                <Form.Input\n                    label='password'\n                    type='password'\n                    placeholder='you should know this one'\n                    name='password'\n                    value={values.password}\n                    error={ errors.password ? true:false }\n                    onChange={onChange}/>\n                <Button type='submit' primary>\n                    login\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className='ui error message'>\n                    <ul className='list'>\n                        {(Object.values(errors).map(e => (\n                            <li key={e}>{e}</li>\n                        )))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n\nconst LOGIN_USER = gql`\n    # Giving the variables into the mutation\n    mutation register(\n        $username: String!\n        $password: String!\n    ) {\n        # The actual mutation with the variables provided\n        login(\n            username: $username\n            password: $password\n        ){\n            # Response\n            id email username createdAt token\n        }\n    }\n`\n\nexport default Login","import React, { useContext, useState } from 'react'\nimport { Button, Form } from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/client'\n\nimport { AuthContext } from '../context/auth'\nimport { useForm } from '../util/hooks'\n\nfunction Register(props) {\n    const context = useContext(AuthContext)\n    const [errors, setErrors] = useState({})\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    })\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        // callback if successful\n        update(_, { data: { register: userData } }) {\n            context.login(userData)\n            props.history.push('/')\n        },\n        onError(err) {\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        // Setting the variables to the state\n        variables: values\n    })\n\n    function registerUser() {\n        addUser()\n    }\n\n    return (\n        <div className='form-container'>\n            <Form onSubmit={onSubmit} noValidate className={loading ? 'loading': ''}>\n                <h1>register</h1>\n                <Form.Input \n                    label='username'\n                    type='text'\n                    placeholder='make it cool'\n                    name='username'\n                    value={values.username}\n                    error={ errors.username ? true:false }\n                    onChange={onChange}/>\n                <Form.Input \n                    label='email'\n                    type='email'\n                    placeholder='gimme that info'\n                    name='email'\n                    value={values.email}\n                    error={ errors.email ? true:false }\n                    onChange={onChange}/>\n                <Form.Input \n                    label='password'\n                    type='password'\n                    placeholder='make it secure'\n                    name='password'\n                    value={values.password}\n                    error={ errors.password ? true:false }\n                    onChange={onChange}/>\n                <Form.Input \n                    label='confirm your password'\n                    type='password'\n                    placeholder='make it the same'\n                    name='confirmPassword'\n                    error={ errors.confirmPassword ? true:false }\n                    value={values.confirmPassword}\n                    onChange={onChange}/>\n                <Button type='submit' primary>\n                    register\n                </Button>\n            </Form>\n            {Object.keys(errors).length > 0 && (\n                <div className='ui error message'>\n                    <ul className='list'>\n                        {(Object.values(errors).map(e => (\n                            <li key={e}>{e}</li>\n                        )))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    )\n}\n\nconst REGISTER_USER = gql`\n    # Giving the variables into the mutation\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        # The actual mutation with the variables provided\n        register(\n            registerInput: {\n                username: $username\n                email: $email\n                password: $password\n                confirmPassword: $confirmPassword\n            }\n        ){\n            # Response\n            id email username createdAt token\n        }\n    }\n`\n\nexport default Register","import React, { useContext, useState, useRef } from 'react'\nimport gql from 'graphql-tag'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { Button, Card, Form, Grid, Icon, Image, Label } from 'semantic-ui-react'\nimport moment from 'moment'\n\nimport { AuthContext } from '../context/auth'\nimport LikeButton from '../components/LikeButton'\nimport DeleteButton from '../components/DeleteButton'\n\nfunction SinglePost(props) {\n    const postId = props.match.params.postId\n    const { user } = useContext(AuthContext)\n    const commentInput = useRef(null)\n\n    const { loading, data } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n            postId\n        }\n    })\n\n    const [comment, setComment] = useState('')\n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update(){\n            setComment(\"\")\n            commentInput.current.blur()\n        },\n        variables: {\n            postId,\n            body: comment\n        }\n    })\n\n    function deletePostCallback() {\n        props.history.push('/')\n    }\n\n    let postMarkup\n    if (loading) postMarkup =  <p>loading...</p>\n    if (data) {\n        var { id, body, createdAt, username, comments, likes, likeCount, commentCount } = data.getPost\n        postMarkup = (<Grid>\n            <Grid.Row>\n                <Grid.Column width={2}>\n                    <Image src='https://www.flaticon.com/svg/static/icons/svg/565/565431.svg'\n                    size=\"small\"\n                    float=\"right\"/>\n                </Grid.Column>\n                <Grid.Column width={10}>\n                    <Card fluid style={{padding: 20}}>\n                        <Card.Header>{username}</Card.Header>\n                        <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                        <Card.Description>{body}</Card.Description>\n                        <hr/>\n                        <Card.Content extra>\n                            <LikeButton user={user} post={{id, likeCount, likes }}/>\n                            <Button as=\"div\" labelPosition=\"right\" onClick={() => console.log(\"Comment \", user)}>\n                                <Button basic color=\"blue\">\n                                    <Icon name='comments'/>\n                                </Button>\n                                <Label basic color=\"blue\" pointing=\"left\">\n                                    {commentCount}\n                                </Label>\n                            </Button>\n                            {user && user.username === username && <DeleteButton postId={id} callback={deletePostCallback}/>}\n                        </Card.Content>\n                    </Card>\n                    {user && (\n                        <Card fluid>\n                            <Card.Content>\n                                <p>comment here</p>\n                                <Form>\n                                    <div className='ui action input fluid'>\n                                        <input type='text' autoComplete='off' placeholder='what is on your mind???' name='comment' value={comment} onChange={e => setComment(e.target.value)} ref={commentInput}/>\n                                        <button type='submit' className='ui button teal' disabled={comment.trim() === ''} onClick={submitComment}>post it</button>\n                                    </div>\n                                </Form>\n                            </Card.Content>\n                        </Card>\n                    )}\n                    {comments.map(e => (\n                        <Card fluid key={e.id}>\n                            <Card.Content>\n                                {user && user.username === e.username && (\n                                    <DeleteButton postId={id} commentId={e.id} />\n                                )}\n                                <Card.Header>{e.username}</Card.Header>\n                                <Card.Meta>{moment(e.createdAt).fromNow()}</Card.Meta>\n                                <Card.Description>{e.body}</Card.Description>\n                            </Card.Content>\n                        </Card>\n                    ))}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>)\n    }\n\n    return postMarkup\n}\n\nconst FETCH_POST_QUERY = gql `\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n            id\n            body\n            createdAt\n            username\n            likeCount\n            likes {\n                username\n            }\n            commentCount\n            comments {\n                id username createdAt body\n            }\n        }\n    }\n`\n\nconst SUBMIT_COMMENT_MUTATION= gql `\n    mutation($postId: String!, $body: String!){\n        createComment(postId: $postId, body: $body){\n            id\n            comments { id body createdAt username }\n            commentCount\n        }\n    }\n`\n\nexport default SinglePost","import { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\n\nimport { AuthProvider } from './context/auth'\nimport AuthRoute from './util/AuthRoute'\n\nimport MenuBar from './components/MenuBar'\nimport Home from './views/Home'\nimport Login from './views/Login'\nimport Register from './views/Register'\nimport SinglePost from './views/SinglePost'\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path='/' component={Home} />\n          <AuthRoute exact path='/login' component={Login} />\n          <AuthRoute exact path='/register' component={Register} />\n          <Route exact path='/posts/:postId' component={SinglePost}/>\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport App from './App'\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\n\nconst httpLink = createHttpLink({\n    uri: 'http://localhost:5000/graphql'\n})\n\nconst authLink = setContext(() => {\n    const token = localStorage.getItem('jwtToken')\n    return{\n        headers: {\n            Authorization: token ? `Bearer ${token}`: ''\n        }\n    }\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\nexport default (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root')\n);\n"],"sourceRoot":""}